name: Generate Dutch Roofing Video

on:
  repository_dispatch:
    types: [generate-roofing-video]
  workflow_dispatch:
    inputs:
      business_name:
        description: 'Dutch roofing business name'
        required: true
        type: string
      website_url:
        description: 'Company website URL'
        required: false
        type: string
      business_city:
        description: 'Business city'
        required: false
        type: string
      business_phone:
        description: 'Business phone number'
        required: false
        type: string
      business_email:
        description: 'Business email'
        required: false
        type: string

jobs:
  generate-dutch-roofing-video:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
        
      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          npm install
          
          # Install FFmpeg for video processing
          echo "üé• Installing FFmpeg..."
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          
          # Verify installations
          echo "üîç Verifying installations..."
          node --version
          npm --version
          ffmpeg -version
          
          # Verify critical dependencies (REMOVED SHARP CHECK)
          echo "üîç Verifying critical dependencies..."
          node -e "console.log('Puppeteer:', require('puppeteer').version || 'installed')"
          node -e "console.log('Express:', require('express').version || 'installed')"
          
      - name: Extract business data
        id: business_data
        run: |
          echo "üìä Extracting business data..."
          
          # Extract data from either workflow_dispatch or repository_dispatch
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BUSINESS_NAME="${{ inputs.business_name }}"
            WEBSITE_URL="${{ inputs.website_url }}"
            BUSINESS_CITY="${{ inputs.business_city }}"
            BUSINESS_PHONE="${{ inputs.business_phone }}"
            BUSINESS_EMAIL="${{ inputs.business_email }}"
            WEBSITE_HTML_BASE64=""
          else
            BUSINESS_NAME="${{ github.event.client_payload.business_name }}"
            WEBSITE_URL="${{ github.event.client_payload.website_url }}"
            BUSINESS_CITY="${{ github.event.client_payload.business_city }}"
            BUSINESS_PHONE="${{ github.event.client_payload.business_phone }}"
            BUSINESS_EMAIL="${{ github.event.client_payload.business_email }}"
            WEBSITE_HTML_BASE64="${{ github.event.client_payload.website_html_base64 }}"
          fi
          
          # Set safe defaults
          BUSINESS_NAME="${BUSINESS_NAME:-dutch-roofing-company}"
          WEBSITE_URL="${WEBSITE_URL:-}"
          BUSINESS_CITY="${BUSINESS_CITY:-Netherlands}"
          BUSINESS_PHONE="${BUSINESS_PHONE:-}"
          BUSINESS_EMAIL="${BUSINESS_EMAIL:-}"
          WEBSITE_HTML_BASE64="${WEBSITE_HTML_BASE64:-}"
          
          # Create safe artifact name
          SANITIZED_NAME=$(echo "$BUSINESS_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          ARTIFACT_NAME="dutch-roofing-video-${SANITIZED_NAME}"
          
          # Limit length to 100 characters
          if [ ${#ARTIFACT_NAME} -gt 100 ]; then
            ARTIFACT_NAME="${ARTIFACT_NAME:0:100}"
          fi
          
          # Set outputs
          echo "business_name=$BUSINESS_NAME" >> $GITHUB_OUTPUT
          echo "website_url=$WEBSITE_URL" >> $GITHUB_OUTPUT
          echo "business_city=$BUSINESS_CITY" >> $GITHUB_OUTPUT
          echo "business_phone=$BUSINESS_PHONE" >> $GITHUB_OUTPUT
          echo "business_email=$BUSINESS_EMAIL" >> $GITHUB_OUTPUT
          echo "website_html_base64=$WEBSITE_HTML_BASE64" >> $GITHUB_OUTPUT
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Business data extracted:"
          echo "  üè¢ Company: $BUSINESS_NAME"
          echo "  üèôÔ∏è City: $BUSINESS_CITY"
          echo "  üì¶ Artifact: $ARTIFACT_NAME"
          
      - name: Process website content
        run: |
          echo "üìÑ Processing website content..."
          
          BUSINESS_NAME="${{ steps.business_data.outputs.business_name }}"
          WEBSITE_URL="${{ steps.business_data.outputs.website_url }}"
          WEBSITE_HTML_BASE64="${{ steps.business_data.outputs.website_html_base64 }}"
          
          # Try to get HTML content
          HTML_SUCCESS=false
          
          # Strategy 1: Use base64 HTML from n8n
          if [ -n "$WEBSITE_HTML_BASE64" ] && [ "$WEBSITE_HTML_BASE64" != "null" ] && [ ${#WEBSITE_HTML_BASE64} -gt 100 ]; then
            echo "üì• Using base64 HTML content from n8n..."
            echo "$WEBSITE_HTML_BASE64" | base64 -d > website.html
            
            if [ -s website.html ]; then
              HTML_SIZE=$(wc -c < website.html)
              echo "‚úÖ Decoded HTML content: $HTML_SIZE bytes"
              HTML_SUCCESS=true
            fi
          fi
          
          # Strategy 2: Fetch from URL
          if [ "$HTML_SUCCESS" = "false" ] && [ -n "$WEBSITE_URL" ] && [ "$WEBSITE_URL" != "null" ]; then
            echo "üåê Fetching content from URL: $WEBSITE_URL"
            
            if curl -s -L --max-time 30 "$WEBSITE_URL" > website.html; then
              HTML_SIZE=$(wc -c < website.html)
              if [ $HTML_SIZE -gt 500 ]; then
                echo "‚úÖ Fetched HTML content: $HTML_SIZE bytes"
                HTML_SUCCESS=true
              fi
            fi
          fi
          
          # Strategy 3: Use repository template
          if [ "$HTML_SUCCESS" = "false" ]; then
            echo "üìÑ Using repository template..."
            
            if [ -f "website.html" ]; then
              echo "‚úÖ Using existing website.html template"
              HTML_SUCCESS=true
            else
              # Create basic template
              cat > website.html << EOF
          <!DOCTYPE html>
          <html lang="nl">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>$BUSINESS_NAME - Professionele Dakdekker</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                  .header { background: #2c3e50; color: white; padding: 60px 40px; text-align: center; }
                  .content { background: white; padding: 40px; margin: 20px 0; }
                  .services { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin: 30px 0; }
                  .service { background: #ecf0f1; padding: 20px; border-radius: 8px; }
                  h1 { font-size: 3em; margin: 0; }
                  h2 { color: #2c3e50; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>$BUSINESS_NAME</h1>
                  <p>Professionele dakwerkzaamheden in Nederland</p>
              </div>
              
              <div class="content">
                  <h2>Onze Diensten</h2>
                  <div class="services">
                      <div class="service">
                          <h3>Dakbedekking</h3>
                          <p>Complete dakbedekkingssystemen met hoogwaardige materialen.</p>
                      </div>
                      <div class="service">
                          <h3>Dakreparatie</h3>
                          <p>Snelle en vakkundige reparatie van lekke daken.</p>
                      </div>
                      <div class="service">
                          <h3>Dakonderhoud</h3>
                          <p>Preventief onderhoud voor langere levensduur.</p>
                      </div>
                      <div class="service">
                          <h3>Gootreiniging</h3>
                          <p>Professionele reiniging van dakgoten.</p>
                      </div>
                  </div>
                  
                  <h2>Contact</h2>
                  <p><strong>Telefoon:</strong> ${{ steps.business_data.outputs.business_phone }}</p>
                  <p><strong>Email:</strong> ${{ steps.business_data.outputs.business_email }}</p>
                  <p><strong>Locatie:</strong> ${{ steps.business_data.outputs.business_city }}</p>
              </div>
          </body>
          </html>
          EOF
              echo "‚úÖ Created basic HTML template"
              HTML_SUCCESS=true
            fi
          fi
          
          if [ "$HTML_SUCCESS" = "true" ]; then
            HTML_SIZE=$(wc -c < website.html)
            echo "üìÑ Final HTML ready: $HTML_SIZE bytes"
          else
            echo "‚ùå Failed to create HTML content"
            exit 1
          fi
          
      - name: Generate video
        run: |
          echo "üé¨ Starting video generation..."
          
          BUSINESS_NAME="${{ steps.business_data.outputs.business_name }}"
          
          # Create videos directory
          mkdir -p videos
          
          # Start the server
          echo "üöÄ Starting video generation server..."
          node server-roofing-simple.js > server.log 2>&1 &
          SERVER_PID=$!
          
          # Wait for server to start
          echo "‚è≥ Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://localhost:3030/health > /dev/null 2>&1; then
              echo "‚úÖ Server started successfully!"
              break
            fi
            echo "‚è≥ Attempt $i/30..."
            sleep 2
          done
          
          # Check if server is running
          if ! curl -s http://localhost:3030/health > /dev/null 2>&1; then
            echo "‚ùå Server failed to start"
            echo "üìã Server logs:"
            cat server.log || echo "No logs available"
            exit 1
          fi
          
          # Read HTML content
          HTML_CONTENT=$(cat website.html)
          
          # Create JSON payload
          jq -n \
            --arg business_name "$BUSINESS_NAME" \
            --arg html_content "$HTML_CONTENT" \
            '{
              business_name: $business_name,
              html_content: $html_content
            }' > payload.json
          
          echo "üìã Sending request to video server..."
          
          # Make API call
          RESPONSE=$(curl -s -w "%{http_code}" -X POST http://localhost:3030/generate-video \
            -H "Content-Type: application/json" \
            -d @payload.json)
          
          HTTP_CODE="${RESPONSE: -3}"
          RESPONSE_BODY="${RESPONSE%???}"
          
          echo "üìä HTTP Status: $HTTP_CODE"
          echo "üìä Response: $RESPONSE_BODY"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "‚ùå API call failed"
            echo "üìã Server logs:"
            cat server.log || echo "No logs available"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          
          # Wait for video generation
          echo "‚è≥ Waiting for video generation..."
          sleep 60
          
          # Check for generated videos
          if ls videos/*.mp4 1> /dev/null 2>&1; then
            echo "‚úÖ Video generated successfully!"
            ls -la videos/
          else
            echo "‚ùå No video files found"
            echo "üìã Videos directory:"
            ls -la videos/ || echo "Videos directory not found"
            echo "üìã Server logs:"
            cat server.log || echo "No logs available"
          fi
          
          # Cleanup
          kill $SERVER_PID 2>/dev/null || true
          rm -f payload.json website.html
          
      - name: Upload video artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.business_data.outputs.artifact_name }}
          path: videos/
          retention-days: 30
          if-no-files-found: warn
        continue-on-error: true
        
      - name: Workflow summary
        run: |
          echo "üéâ Dutch roofing video workflow completed!"
          echo ""
          echo "üìä Summary:"
          echo "  üè¢ Company: ${{ steps.business_data.outputs.business_name }}"
          echo "  üèôÔ∏è City: ${{ steps.business_data.outputs.business_city }}"
          echo "  üì¶ Artifact: ${{ steps.business_data.outputs.artifact_name }}"
          echo ""
          echo "üìÅ Generated files:"
          ls -la videos/ || echo "No files generated"
          echo ""
          echo "‚úÖ Workflow completed!"
